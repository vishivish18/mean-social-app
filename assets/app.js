angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,e){t.currentUser=e})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(e,o){n.login(e,o).then(function(n){t.$emit("login",n.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){n.fetch().success(function(n){t.posts=n}),t.addPost=function(){t.postBody&&n.create({username:"vishalRanjan",body:t.postBody}).success(function(n){t.posts.unshift(n),t.postBody=null})}}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,n){t.register=function(t,e){n.register(t,e).then(function(t){alert("Thank you for signing up "+t.data.username)})["catch"](function(t){console.log(t)})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("api/users")},n.login=function(e,o){return t.post("api/sessions",{username:e,password:o}).then(function(e){return n.token=e.data,t.defaults.headers.common["x-auth"]=e.data,n.getUser()})},n.register=function(n,e){return t.post("api/users",{username:n,password:e}).then(function(t){return t})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsIl8iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiUG9zdHNTdmMiLCJmZXRjaCIsInN1Y2Nlc3MiLCJwb3N0cyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJwb3N0IiwidW5zaGlmdCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImFsZXJ0IiwiZXJyIiwiY29uc29sZSIsImxvZyIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsInZhbCIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUNBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLElBQUEsUUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBSSxZQUFBRCxPQ0hBTixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUssR0FDQUwsRUFBQU0sTUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBQyxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFDLEdBQ0FWLEVBQUFXLE1BQUEsUUFBQUQsRUFBQUUsWUNMQWYsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFhLEdBQ0FBLEVBQUFDLFFBQ0FDLFFBQUEsU0FBQUMsR0FDQWhCLEVBQUFnQixNQUFBQSxJQUlBaEIsRUFBQWlCLFFBQUEsV0FDQWpCLEVBQUFrQixVQUNBTCxFQUFBTSxRQUNBWixTQUFBLGVBQ0FhLEtBQUFwQixFQUFBa0IsV0FDQUgsUUFBQSxTQUFBTSxHQUNBckIsRUFBQWdCLE1BQUFNLFFBQUFELEdBQ0FyQixFQUFBa0IsU0FBQSxXQ2ZBckIsUUFBQUMsT0FBQSxPQUNBeUIsUUFBQSxZQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQVgsTUFBQSxXQUNBLE1BQUFVLEdBQUFFLElBQUEsZUFFQUQsS0FBQU4sT0FBQSxTQUFBRSxHQUVBLE1BQUFHLEdBQUFILEtBQUEsYUFBQUEsT0NQQXhCLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxnQkFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUssR0FDQUwsRUFBQTJCLFNBQUEsU0FBQXBCLEVBQUFDLEdBQ0FILEVBQUFzQixTQUFBcEIsRUFBQUMsR0FDQUMsS0FBQSxTQUFBQyxHQUNBa0IsTUFBQSw0QkFBQWxCLEVBQUFFLEtBQUFMLFlBRkFGLFNBSUEsU0FBQXdCLEdBQ0FDLFFBQUFDLElBQUFGLFNDUkFoQyxRQUFBQyxPQUFBLE9BQ0FrQyxRQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsS0FBQW5DLFdBQUEsWUFBQW9DLFlBQUEsZUFDQUQsS0FBQSxhQUFBbkMsV0FBQSxlQUFBb0MsWUFBQSxrQkFDQUQsS0FBQSxVQUFBbkMsV0FBQSxZQUFBb0MsWUFBQSxrQkNMQXRDLFFBQUFDLE9BQUEsT0FDQXlCLFFBQUEsV0FBQSxRQUFBLFNBQUFDLEdBQ0EsR0FBQVksR0FBQVgsSUFDQVcsR0FBQUMsUUFBQSxXQUNBLE1BQUFiLEdBQUFFLElBQUEsY0FHQVUsRUFBQTlCLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBZ0IsR0FBQUgsS0FBQSxnQkFDQWQsU0FBQUEsRUFBQUMsU0FBQUEsSUFDQUMsS0FBQSxTQUFBNkIsR0FHQSxNQUZBRixHQUFBRyxNQUFBRCxFQUFBMUIsS0FDQVksRUFBQWdCLFNBQUFDLFFBQUFDLE9BQUEsVUFBQUosRUFBQTFCLEtBQ0F3QixFQUFBQyxhQUtBRCxFQUFBVCxTQUFBLFNBQUFwQixFQUFBQyxHQUNBLE1BQUFnQixHQUFBSCxLQUFBLGFBQ0FkLFNBQUFBLEVBQUFDLFNBQUFBLElBQ0FDLEtBQUEsU0FBQTZCLEdBQ0EsTUFBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsW1xuJ25nUm91dGUnXG5dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcsZnVuY3Rpb24oJHNjb3BlKXtcblx0JHNjb3BlLiRvbignbG9naW4nLGZ1bmN0aW9uKF8sdXNlcil7XG5cdFx0JHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlclxuXHR9KVxufSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdMb2dpbkN0cmwnLGZ1bmN0aW9uKCRzY29wZSxVc2VyU3ZjKXtcblx0JHNjb3BlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUscGFzc3dvcmQpe1xuXHRcdFVzZXJTdmMubG9naW4odXNlcm5hbWUscGFzc3dvcmQpXG5cdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0JHNjb3BlLiRlbWl0KCdsb2dpbicscmVzcG9uc2UuZGF0YSlcblx0XHR9KVxuXHR9XG59KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsZnVuY3Rpb24oJHNjb3BlLFBvc3RzU3ZjKXsgXG4gIFBvc3RzU3ZjLmZldGNoKClcbiBcdC5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0cyl7XG4gXHRcdCRzY29wZS5wb3N0cyA9IHBvc3RzXG5cbiBcdH0pXG5cdFxuIFx0ICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICgkc2NvcGUucG9zdEJvZHkpIHtcbiAgICAgICAgICAgIFBvc3RzU3ZjLmNyZWF0ZSh7XG4gICAgICAgICAgICAgIHVzZXJuYW1lOiAndmlzaGFsUmFuamFuJyxcbiAgICAgICAgICAgICAgYm9keTogICAgICRzY29wZS5wb3N0Qm9keSAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpXG4gICAgICAgICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiBcbn0pXG5cbiAiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uKCRodHRwKXtcbiAgIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7ICAgXHRcbiAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpXG4gICB9XG4gICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KXtcbiAgIFx0XG4gICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycscG9zdClcbiAgIH1cbiB9KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcsZnVuY3Rpb24oJHNjb3BlLFVzZXJTdmMpe1xuXHQkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbih1c2VybmFtZSxwYXNzd29yZCl7XG5cdFx0VXNlclN2Yy5yZWdpc3Rlcih1c2VybmFtZSxwYXNzd29yZClcblx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRhbGVydCgnVGhhbmsgeW91IGZvciBzaWduaW5nIHVwICcrIHJlc3BvbnNlLmRhdGEudXNlcm5hbWUpXG5cdFx0fSlcblx0XHQuY2F0Y2goZnVuY3Rpb24gKGVycil7XG5cdFx0XHRjb25zb2xlLmxvZyhlcnIpXG5cdFx0fSlcblx0fVxuXG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG5cdCRyb3V0ZVByb3ZpZGVyXG5cdC53aGVuKCcvJyx7Y29udHJvbGxlcjonUG9zdHNDdHJsJyx0ZW1wbGF0ZVVybDoncG9zdHMuaHRtbCd9KVxuXHQud2hlbignL3JlZ2lzdGVyJyx7Y29udHJvbGxlcjonUmVnaXN0ZXJDdHJsJyx0ZW1wbGF0ZVVybDoncmVnaXN0ZXIuaHRtbCd9KVxuXHQud2hlbignL2xvZ2luJyx7Y29udHJvbGxlcjonTG9naW5DdHJsJyx0ZW1wbGF0ZVVybDonbG9naW4uaHRtbCd9KVx0XG5cdFxufSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24oJGh0dHApe1xuXHR2YXIgc3ZjID0gdGhpc1xuXHRzdmMuZ2V0VXNlcj0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCdhcGkvdXNlcnMnKVxuXHR9XG5cblx0c3ZjLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUscGFzc3dvcmQpe1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCdhcGkvc2Vzc2lvbnMnLHtcblx0XHRcdHVzZXJuYW1lIDogdXNlcm5hbWUsIHBhc3N3b3JkIDogcGFzc3dvcmRcblx0XHR9KS50aGVuKGZ1bmN0aW9uKHZhbCl7XG5cdFx0XHRzdmMudG9rZW4gPSB2YWwuZGF0YVxuXHRcdFx0JGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ3gtYXV0aCddID0gdmFsLmRhdGFcblx0XHRcdHJldHVybiBzdmMuZ2V0VXNlcigpXG5cdFx0fSlcblx0fVxuXG5cblx0c3ZjLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXJuYW1lLHBhc3N3b3JkKXtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnYXBpL3VzZXJzJyx7XG5cdFx0XHR1c2VybmFtZSA6IHVzZXJuYW1lLCBwYXNzd29yZCA6IHBhc3N3b3JkXG5cdFx0fSkudGhlbihmdW5jdGlvbih2YWwpe1x0XHRcdFxuXHRcdFx0cmV0dXJuIHZhbDtcblxuXHRcdH0pXG5cdH1cblxufSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=