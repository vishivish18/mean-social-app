angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(o){o.$on("login",function(t,n){o.currentUser=n})}]),angular.module("app").controller("HomeCtrl",["$scope",function(o){o.hello="hello"}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,t){o.login=function(n,e){t.login(n,e).then(function(t){o.$emit("login",t.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(o,t){t.fetch().success(function(t){o.posts=t}),o.addPost=function(){o.postBody&&t.create({body:o.postBody}).success(function(t){o.postBody=null})},o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)})})}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(o,t){o.register=function(o,n){t.register(o,n).then(function(o){alert("Thank you for signing up "+o.data.username)})["catch"](function(o){console.log(o)})}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/home",{controller:"HomeCtrl",templateUrl:"home.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("api/users")},t.login=function(n,e){return o.post("api/sessions",{username:n,password:e}).then(function(n){return t.token=n.data,o.defaults.headers.common["x-auth"]=n.data,t.getUser()})},t.register=function(t,n){return o.post("api/users",{username:t,password:n}).then(function(o){return o})}}]),angular.module("app").run(["$rootScope",function(o){var t="ws://localhost:3000",n=new WebSocket(t);n.onopen=function(){console.log("WebSocket connected")},n.onmessage=function(t){console.log(t);var n=JSON.parse(t.data);o.$broadcast("ws:"+n.topic,n.data)}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJob21lLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyIsIndlYnNvY2tldHMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkb24iLCJfIiwidXNlciIsImN1cnJlbnRVc2VyIiwiaGVsbG8iLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiUG9zdHNTdmMiLCJmZXRjaCIsInN1Y2Nlc3MiLCJwb3N0cyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJwb3N0IiwiJGFwcGx5IiwidW5zaGlmdCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImFsZXJ0IiwiZXJyIiwiY29uc29sZSIsImxvZyIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsInZhbCIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwicnVuIiwiJHJvb3RTY29wZSIsInVybCIsImNvbm5lY3Rpb24iLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJvbm1lc3NhZ2UiLCJlIiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsIiRicm9hZGNhc3QiLCJ0b3BpYyJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsT0FDQSxZQ0RBRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsbUJBQUEsU0FBQSxTQUFBQyxHQUNBQSxFQUFBQyxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUksWUFBQUQsT0NIQU4sUUFBQUMsT0FBQSxPQUNBQyxXQUFBLFlBQUEsU0FBQSxTQUFBQyxHQUNBQSxFQUFBSyxNQUFBLFdDRkFSLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBTSxHQUNBTixFQUFBTyxNQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFDLE1BQUFDLEVBQUFDLEdBQ0FDLEtBQUEsU0FBQUMsR0FDQVgsRUFBQVksTUFBQSxRQUFBRCxFQUFBRSxZQ0xBaEIsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFjLEdBQ0FBLEVBQUFDLFFBQ0FDLFFBQUEsU0FBQUMsR0FDQWpCLEVBQUFpQixNQUFBQSxJQUlBakIsRUFBQWtCLFFBQUEsV0FDQWxCLEVBQUFtQixVQUNBTCxFQUFBTSxRQUVBQyxLQUFBckIsRUFBQW1CLFdBQ0FILFFBQUEsU0FBQU0sR0FFQXRCLEVBQUFtQixTQUFBLFFBS0FuQixFQUFBQyxJQUFBLGNBQUEsU0FBQUMsRUFBQW9CLEdBQ0F0QixFQUFBdUIsT0FBQSxXQUNBdkIsRUFBQWlCLE1BQUFPLFFBQUFGLFVDdEJBekIsUUFBQUMsT0FBQSxPQUNBMkIsUUFBQSxZQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQVosTUFBQSxXQUNBLE1BQUFXLEdBQUFFLElBQUEsZUFFQUQsS0FBQVAsT0FBQSxTQUFBRSxHQUVBLE1BQUFJLEdBQUFKLEtBQUEsYUFBQUEsT0NQQXpCLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxnQkFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQU0sR0FDQU4sRUFBQTZCLFNBQUEsU0FBQXJCLEVBQUFDLEdBQ0FILEVBQUF1QixTQUFBckIsRUFBQUMsR0FDQUMsS0FBQSxTQUFBQyxHQUNBbUIsTUFBQSw0QkFBQW5CLEVBQUFFLEtBQUFMLFlBRkFGLFNBSUEsU0FBQXlCLEdBQ0FDLFFBQUFDLElBQUFGLFNDUkFsQyxRQUFBQyxPQUFBLE9BQ0FvQyxRQUFBLGlCQUFBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsS0FBQXJDLFdBQUEsWUFBQXNDLFlBQUEsZUFDQUQsS0FBQSxhQUFBckMsV0FBQSxlQUFBc0MsWUFBQSxrQkFDQUQsS0FBQSxVQUFBckMsV0FBQSxZQUFBc0MsWUFBQSxlQUNBRCxLQUFBLFNBQUFyQyxXQUFBLFdBQUFzQyxZQUFBLGlCQ05BeEMsUUFBQUMsT0FBQSxPQUNBMkIsUUFBQSxXQUFBLFFBQUEsU0FBQUMsR0FDQSxHQUFBWSxHQUFBWCxJQUNBVyxHQUFBQyxRQUFBLFdBQ0EsTUFBQWIsR0FBQUUsSUFBQSxjQUdBVSxFQUFBL0IsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE1BQUFpQixHQUFBSixLQUFBLGdCQUNBZCxTQUFBQSxFQUFBQyxTQUFBQSxJQUNBQyxLQUFBLFNBQUE4QixHQUdBLE1BRkFGLEdBQUFHLE1BQUFELEVBQUEzQixLQUNBYSxFQUFBZ0IsU0FBQUMsUUFBQUMsT0FBQSxVQUFBSixFQUFBM0IsS0FDQXlCLEVBQUFDLGFBS0FELEVBQUFULFNBQUEsU0FBQXJCLEVBQUFDLEdBQ0EsTUFBQWlCLEdBQUFKLEtBQUEsYUFDQWQsU0FBQUEsRUFBQUMsU0FBQUEsSUFDQUMsS0FBQSxTQUFBOEIsR0FDQSxNQUFBQSxTQ3RCQTNDLFFBQUFDLE9BQUEsT0FDQStDLEtBQUEsYUFBQSxTQUFBQyxHQUNBLEdBQUFDLEdBQUEsc0JBQ0FDLEVBQUEsR0FBQUMsV0FBQUYsRUFFQUMsR0FBQUUsT0FBQSxXQUNBbEIsUUFBQUMsSUFBQSx3QkFHQWUsRUFBQUcsVUFBQSxTQUFBQyxHQUNBcEIsUUFBQUMsSUFBQW1CLEVBQ0EsSUFBQUMsR0FBQUMsS0FBQUMsTUFBQUgsRUFBQXZDLEtBQ0FpQyxHQUFBVSxXQUFBLE1BQUFILEVBQUFJLE1BQUFKLEVBQUF4QyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnYXBwJyxbXG4nbmdSb3V0ZSdcbl0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJyxmdW5jdGlvbigkc2NvcGUpe1xuXHQkc2NvcGUuJG9uKCdsb2dpbicsZnVuY3Rpb24oXyx1c2VyKXtcblx0XHQkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXG5cdH0pXG59KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0hvbWVDdHJsJyxmdW5jdGlvbigkc2NvcGUpeyBcbiAgJHNjb3BlLmhlbGxvID0gXCJoZWxsb1wiXG4gXG59KVxuXG4gIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5DdHJsJyxmdW5jdGlvbigkc2NvcGUsVXNlclN2Yyl7XG5cdCRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLHBhc3N3b3JkKXtcblx0XHRVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLHBhc3N3b3JkKVxuXHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdCRzY29wZS4kZW1pdCgnbG9naW4nLHJlc3BvbnNlLmRhdGEpXG5cdFx0fSlcblx0fVxufSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQb3N0c0N0cmwnLGZ1bmN0aW9uKCRzY29wZSxQb3N0c1N2Yyl7IFxuICBQb3N0c1N2Yy5mZXRjaCgpXG4gXHQuc3VjY2VzcyhmdW5jdGlvbiAocG9zdHMpe1xuIFx0XHQkc2NvcGUucG9zdHMgPSBwb3N0c1xuXG4gXHR9KVxuXHRcbiBcdCAkc2NvcGUuYWRkUG9zdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG4gICAgICAgICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xuICAgICAgICAgICAgICAvKnVzZXJuYW1lOiAndmlzaGFsUmFuamFuJywqL1xuICAgICAgICAgICAgICBib2R5OiAgICAgJHNjb3BlLnBvc3RCb2R5ICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgICAgICAgLy8kc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KVxuICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgJHNjb3BlLiRvbignd3M6bmV3X3Bvc3QnLGZ1bmN0aW9uKF8scG9zdCl7XG4gICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xuICAgICAgJHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdClcbiAgICB9KVxuICB9KVxuIFxufSlcblxuICIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1Bvc3RzU3ZjJywgZnVuY3Rpb24oJGh0dHApe1xuICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uICgpIHsgICBcdFxuICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJylcbiAgIH1cbiAgIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKHBvc3Qpe1xuICAgXHRcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJyxwb3N0KVxuICAgfVxuIH0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJyxmdW5jdGlvbigkc2NvcGUsVXNlclN2Yyl7XG5cdCRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLHBhc3N3b3JkKXtcblx0XHRVc2VyU3ZjLnJlZ2lzdGVyKHVzZXJuYW1lLHBhc3N3b3JkKVxuXHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdGFsZXJ0KCdUaGFuayB5b3UgZm9yIHNpZ25pbmcgdXAgJysgcmVzcG9uc2UuZGF0YS51c2VybmFtZSlcblx0XHR9KVxuXHRcdC5jYXRjaChmdW5jdGlvbiAoZXJyKXtcblx0XHRcdGNvbnNvbGUubG9nKGVycilcblx0XHR9KVxuXHR9XG5cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcblx0JHJvdXRlUHJvdmlkZXJcblx0LndoZW4oJy8nLHtjb250cm9sbGVyOidQb3N0c0N0cmwnLHRlbXBsYXRlVXJsOidwb3N0cy5odG1sJ30pXG5cdC53aGVuKCcvcmVnaXN0ZXInLHtjb250cm9sbGVyOidSZWdpc3RlckN0cmwnLHRlbXBsYXRlVXJsOidyZWdpc3Rlci5odG1sJ30pXG5cdC53aGVuKCcvbG9naW4nLHtjb250cm9sbGVyOidMb2dpbkN0cmwnLHRlbXBsYXRlVXJsOidsb2dpbi5odG1sJ30pXHRcblx0LndoZW4oJy9ob21lJyx7Y29udHJvbGxlcjonSG9tZUN0cmwnLHRlbXBsYXRlVXJsOidob21lLmh0bWwnfSlcdFxuXHRcbn0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uKCRodHRwKXtcblx0dmFyIHN2YyA9IHRoaXNcblx0c3ZjLmdldFVzZXI9IGZ1bmN0aW9uKCl7XG5cdFx0cmV0dXJuICRodHRwLmdldCgnYXBpL3VzZXJzJylcblx0fVxuXG5cdHN2Yy5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLHBhc3N3b3JkKXtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnYXBpL3Nlc3Npb25zJyx7XG5cdFx0XHR1c2VybmFtZSA6IHVzZXJuYW1lLCBwYXNzd29yZCA6IHBhc3N3b3JkXG5cdFx0fSkudGhlbihmdW5jdGlvbih2YWwpe1xuXHRcdFx0c3ZjLnRva2VuID0gdmFsLmRhdGFcblx0XHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWyd4LWF1dGgnXSA9IHZhbC5kYXRhXG5cdFx0XHRyZXR1cm4gc3ZjLmdldFVzZXIoKVxuXHRcdH0pXG5cdH1cblxuXG5cdHN2Yy5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSxwYXNzd29yZCl7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJ2FwaS91c2Vycycse1xuXHRcdFx0dXNlcm5hbWUgOiB1c2VybmFtZSwgcGFzc3dvcmQgOiBwYXNzd29yZFxuXHRcdH0pLnRoZW4oZnVuY3Rpb24odmFsKXtcdFx0XHRcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0XHQvL3JldHVybiBzdmMubG9naW4odXNlcm5hbWUscGFzc3dvcmQpIFRoaXMgbGluZSBpcyBubyB3b3JrdW5nLiBXaHkgP1xuXG5cdFx0fSlcblx0fVxuXG59KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnJ1bihmdW5jdGlvbigkcm9vdFNjb3BlKXtcblx0dmFyIHVybCA9ICd3czovL2xvY2FsaG9zdDozMDAwJ1xuXHR2YXIgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQodXJsKVxuXG5cdGNvbm5lY3Rpb24ub25vcGVuID0gZnVuY3Rpb24oKXtcblx0XHRjb25zb2xlLmxvZygnV2ViU29ja2V0IGNvbm5lY3RlZCcpO1xuXHR9XG5cblx0Y29ubmVjdGlvbi5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKXtcblx0XHRjb25zb2xlLmxvZyhlKVxuXHRcdHZhciBwYXlsb2FkID0gSlNPTi5wYXJzZShlLmRhdGEpXG5cdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KCd3czonK3BheWxvYWQudG9waWMsIHBheWxvYWQuZGF0YSlcblx0fVxuXHRcblxufSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=